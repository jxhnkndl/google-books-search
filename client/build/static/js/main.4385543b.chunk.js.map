{"version":3,"sources":["utils/API.js","components/MainNav/index.js","components/Header/index.js","utils/bookFormatting.js","components/Book/index.js","components/Search/index.js","components/Saved/index.js","components/Footer/index.js","App.js","registerServiceWorker.js","index.js"],"names":["query","axios","get","bookData","post","id","delete","MainNav","Navbar","bg","variant","className","Brand","href","Nav","Link","styles","header","backgroundImage","backgroundPosition","backgroundSize","jumbotron","backgroundColor","Header","style","Jumbotron","formatAuthors","authors","length","output","forEach","author","index","Book","props","useState","_id","title","description","image","link","location","useLocation","handleSaveBook","a","API","response","console","log","toast","success","error","handleDeleteBook","loadBooks","Image","src","rounded","fluid","pathname","Button","onClick","Search","setQuery","results","setResults","handleSubmit","event","preventDefault","books","data","items","Form","Group","controlId","Control","type","placeholder","onChange","target","value","map","book","volumeInfo","imageLinks","infoLink","thumbnail","Saved","savedBooks","setSavedBooks","useEffect","Footer","App","exact","path","component","position","autoClose","hideProgressionBar","newestOnTop","closeOnClick","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4385543b.chunk.js","sourcesContent":["// Import dependencies\nimport axios from 'axios';\n\n// Create and export axios request methods\nexport default {\n  // Search for book using Google Books API\n  search: function(query) {\n    return axios.get(`https://www.googleapis.com/books/v1/volumes?q=${query}&maxResults=20`);\n  },\n  // Return all saved books from database\n  getBooks: function() {\n    return axios.get(\"/api/books\");\n  },\n  // Add selected book to database\n  saveBook: function(bookData) {\n    return axios.post(\"/api/books\", bookData);\n  },\n  // Delete selected book from database\n  deleteBook: function(id) {\n    return axios.delete(\"/api/books/\" + id);\n  }\n}","// Import dependencies\nimport React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport './index.scss';\n\n// Create and export Navbar component\nexport default function MainNav() {\n  return(\n    <Navbar bg=\"dark\" variant=\"dark\" className=\"main-nav\">\n      <Navbar.Brand href=\"#home\">Google Books</Navbar.Brand>\n      <Nav>\n        <Nav.Link href=\"/search\">Search</Nav.Link>\n        <Nav.Link href=\"/saved\">Saved</Nav.Link>\n      </Nav>\n    </Navbar>\n  );\n}","// Import dependencies\nimport React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nconst styles = {\n  header: {\n    backgroundImage: `url(${process.env.PUBLIC_URL + '/imgs/bg-books.jpg'})`,\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n  },\n  jumbotron: {\n    backgroundColor: 'rgba(21, 32, 43, 0.6)',\n  }\n};\n\n// Create and export Header component\nexport default function Header() {\n  return (\n    <header style={styles.header}>\n      <Jumbotron style={styles.jumbotron} className=\"text-white p-5 mb-0\">\n        <div className=\"text-left\">\n          <h1>Google Books Search</h1>\n          <h4 className=\"font-weight-light\">Find and Save Your Favorite Books</h4>\n        </div>\n      </Jumbotron>\n    </header>\n  );\n}\n","// Create and export function to reduce author arrays to a single string\nexport const formatAuthors = (authors) => {\n\n  // If there is only one author\n  if (authors.length === 1) {\n    return authors[0];\n  }\n\n  // If there are two authors\n  if (authors.length === 2) {\n    return `${authors[0]} and ${authors[1]}`;\n  }\n\n  // If there are more than two authors\n  if (authors.length > 2) {\n    let output = '';\n    authors.forEach((author, index) => {\n      if (index === authors.length - 1) {\n        output += `and ${author}`;\n      } else {\n        output += `${author}, `;\n      }\n    });\n    return output;\n  }\n};","// Import modules\nimport React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { formatAuthors } from '../../utils/bookFormatting';\nimport Button from 'react-bootstrap/Button';\nimport Image, { propTypes } from 'react-bootstrap/Image';\nimport { toast } from 'react-toastify';\nimport API from '../../utils/API';\n\n// Create and export Book component\nexport default function Book(props) {\n  // Set this result's bookData state to the props passed in from the API response\n  const [bookData, setBookData] = useState({\n    id: props._id,\n    title: props.title,\n    authors: props.authors,\n    description: props.description,\n    image: props.image,\n    link: props.link,\n  });\n\n  // Capture application location to use in button rendering\n  const location = useLocation();\n\n  // Redirect browser to Google Books info page\n  const handleBtnView = () => {\n    window.location.href = props.link;\n  };\n\n  // Save book to database\n  const handleSaveBook = async () => {\n    try {\n      const response = await API.saveBook(bookData);\n      console.log(response);\n      console.log('Book saved.');\n      toast.success('Book saved! 🍎');\n    } catch (err) {\n      toast.error('Uh oh! Looks like something went wrong. Can you try again? 🧐');\n      console.log(err);\n    }\n  };\n\n  // Delete book from database and update savedBooks state\n  const handleDeleteBook = async (id) => {\n    try {\n      const response = await API.deleteBook(id);\n      console.log(response);\n      console.log('Book deleted.');\n      toast.success('Book deleted! 🍎');\n      props.loadBooks();\n    } catch (err) {\n      toast.error('Uh oh! Looks like something went wrong. Can you try again? 🧐');\n      console.log(err);\n    }\n  };\n\n  // Returned component to render\n  return (\n    <div\n      id={props.id}\n      className=\"book bg-light text-secondary rounded p-4 my-3\"\n    >\n      <div className=\"row\">\n        <div className=\"col-12 col-md-2\">\n          <Image src={props.image} rounded fluid />\n        </div>\n        <div className=\"col-12 col-md-10\">\n          <p className=\"h5 text-white\">{props.title}</p>\n          <p>{formatAuthors(props.authors)}</p>\n          <p>{props.description}</p>\n          <a\n            href={props.link}\n            className=\"btn btn-primary py-2 px-4 mr-2\"\n            // variant=\"primary\"\n            // onClick={handleBtnView}\n          >\n            View\n          </a>\n\n          {/* Conditionally render a Save button or Delete button based on route location */}\n          {location.pathname === '/search' || location.pathname === '/' ? (\n            <Button\n              className=\"py-2 px-4 mr-2\"\n              variant=\"secondary\"\n              onClick={() => handleSaveBook()}\n            >\n              Save\n            </Button>\n          ) : (\n            <Button\n              className=\"py-2 px-4 mr-2\"\n              variant=\"danger\"\n              onClick={() => handleDeleteBook(props.id)}\n            >\n              Delete\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","// Import dependencies\nimport React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Book from '../Book';\nimport API from '../../utils/API';\nimport './style.scss';\n\n// Create and export Search page component\nexport default function Search() {\n  // Create stateful properties\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [bookObj, setBookObj] = useState({});\n\n  // Execute search for title using Google Books API\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const books = await API.search(query);\n      setResults(books.data.items);\n      setQuery('');\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // Final rendered component\n  return (\n    <section>\n      <div className=\"rounded px-5 pt-5 pb-1\">\n        <h3 className=\"text-secondary\">Search Google Books</h3>\n        <Form>\n          <Form.Group controlId=\"form-title\">\n            {/* Search bar */}\n            <Form.Control\n              className=\"input bg-dark text-secondary\"\n              type=\"text\"\n              placeholder=\"Enter a Book Title...\"\n              onChange={(event) => {\n                if (query === '') {\n                  setResults([]);\n                }\n                setQuery(event.target.value);\n              }}\n              value={query}\n            />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit}>\n            Search\n          </Button>\n        </Form>\n      </div>\n\n      {/* If there are results, render them */}\n      {/* Otherwise, display no results message */}\n      {results.length ? (\n        <div className=\"rounded p-5\">\n          <h4 className=\"text-secondary\">Results</h4>\n          {results.map((book, index) => {\n            // Destructure required properties\n            const {\n              id,\n              authors,\n              description,\n              imageLinks,\n              infoLink,\n              title,\n            } = book.volumeInfo;\n\n            // Skip over the result if a key field is missing\n            if (!authors || !description || !title || !imageLinks) {\n              return;\n            }\n\n            // Render Book components for up to 20 results\n            return (\n              <Book\n                key={index}\n                id={index}\n                title={title}\n                authors={authors}\n                description={description}\n                image={imageLinks.thumbnail}\n                link={infoLink}\n              />\n            );\n          })}\n        </div>\n      ) : (\n        <div className=\"rounded p-5\">\n          <h4 className=\"text-secondary\">No Results to Display</h4>\n        </div>\n      )}\n    </section>\n  );\n}\n","// Import dependencies\nimport React, { useState, useEffect } from 'react';\nimport Book from '../Book';\nimport API from '../../utils/API';\n\n// Create and export Search page component\nexport default function Saved(props) {\n  // Init saved books state\n  const [savedBooks, setSavedBooks] = useState([]);\n\n  // When component mounts, load saved books\n  useEffect(() => {\n    loadBooks();\n  }, []);\n\n  // Initiate API call for saved books\n  const loadBooks = async () => {\n    try {\n      const results = await API.getBooks();\n      setSavedBooks(results.data);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <section>\n      {savedBooks.length ? (\n        <div className=\"rounded p-5\">\n          <h3 className=\"text-secondary\">Saved Books</h3>\n          {savedBooks.map((book, index) => {\n            console.log(book);\n            return (\n              <Book \n                key={book._id}\n                id={book._id}\n                title={book.title}\n                authors={book.authors}\n                description={book.description}\n                image={book.image}\n                link={book.link}\n                loadBooks={loadBooks}\n              />\n            );\n          })}\n        </div>\n      ) : (\n        <div className=\"rounded p-5\">\n          <h4 className=\"text-secondary\">No Saved Books to Display</h4>\n        </div>\n      )}\n    </section>\n  );\n}","// Import dependencies\nimport React from 'react';\nimport './style.scss';\n\n// Create and export Footer component\nexport default function Footer() {\n  return (\n    <footer className=\"bg-light py-2 mt-5\">\n      <p className=\"text-white text-center \">Copyright 2021</p>\n    </footer>\n  );\n}","// Import dependencies\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport API from './utils/API';\nimport MainNav from './components/MainNav';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Saved from './components/Saved';\nimport Footer from './components/Footer';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.scss';\n\n// Toast\n\n// Create and export App component\nexport default function App() {\n  return (\n    <div className=\"app-container bg-dark\">\n      <Router>\n        <MainNav />\n        <Header />\n        <main className=\"container mb-5\">\n          <Switch>\n            <Route exact path={\"/\"} component={Search} />\n            <Route exact path={\"/search\"} component={Search} />\n            <Route exact path={\"/saved\"} component={Saved} />\n          </Switch>\n        </main>\n        <Footer />\n        <ToastContainer \n          position=\"top-right\"\n          autoClose={3000}\n          hideProgressionBar={false}\n          newestOnTop\n          closeOnClick\n        />\n      </Router>\n    </div>\n  );\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Import dependencies\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\n// Render the React app\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// Register service worker\nregisterServiceWorker();"],"sourceRoot":""}